{
  "id": "snapshot_1759720694022_uo7c53jwn",
  "approvalId": "approval_1759719419097_9wctxkqql",
  "approvalTitle": "EchoMind设计文档审批",
  "version": 2,
  "timestamp": "2025-10-06T03:18:14.022Z",
  "trigger": "approved",
  "status": "pending",
  "content": "# EchoMind 应用设计文档\n\n## 1. 产品概述\n\nEchoMind是一款心理成长辅助应用，通过AI分析和认知行为疗法（CBT）原理，帮助用户记录情绪、识别思维模式、提供个性化建议，并通过练习系统促进心理健康成长。\n\n## 2. 架构设计\n\n### 2.1 整体架构\n- **前端**：React Native 跨平台应用\n- **状态管理**：Redux Toolkit\n- **本地存储**：AsyncStorage\n- **AI服务集成**：可配置的AI API接口（支持本地/远程服务）\n\n### 2.2 核心模块划分\n\n| 模块 | 主要职责 | 文件位置 |\n|------|---------|----------|\n| 日记系统 | 情绪记录、扭曲识别、AI分析 | src/screens/DiaryWizardScreen.tsx |\n| 数据统计 | 情绪统计、趋势分析、可视化 | src/screens/StatsScreen.tsx |\n| 个人说明书 | 用户特征管理、自我认知 | src/screens/PersonalProfileScreen.tsx |\n| 练习系统 | CBT练习库、进度追踪 | src/screens/ExercisesScreen.tsx |\n| 主题定制 | 界面风格、暗色模式 | src/themes/ |\n\n## 3. 功能设计\n\n### 3.1 日记系统设计\n\n#### 3.1.1 核心流程\n```mermaid\nflowchart TD\n    A[开始记录] --> B{选择模式}\n    B -->|快速记录| C[输入情绪/事件]\n    B -->|完整记录| D[引导式问答]\n    C --> E[AI分析]\n    D --> E\n    E --> F[显示结果]\n    F --> G[保存记录]\n```\n\n#### 3.1.2 数据结构\n```typescript\ninterface DiaryEntry {\n  id: string;\n  date: string;\n  emotion: string;\n  intensity: number;  // 1-10\n  event: string;\n  thoughts: string;\n  distortions: string[];\n  alternativeThoughts: string[];\n  aiAnalysis: {\n    summary: string;\n    suggestions: string[];\n  };\n  tags: string[];\n}\n```\n\n#### 3.1.3 页面组件\n- DiaryWizardScreen: 引导式记录流程\n- DiaryDetailScreen: 查看/编辑单条记录\n- DiaryListScreen: 记录列表与筛选\n\n### 3.2 数据统计与可视化设计\n\n#### 3.2.1 核心统计维度\n- 情绪分布图表（饼图）\n- 情绪趋势图（折线图）\n- 思维扭曲类型统计（柱状图）\n- 记录频率热图\n\n#### 3.2.2 数据计算逻辑\n- 日/周/月/年统计切换\n- 情绪强度平均值计算\n- 扭曲类型频率排序\n- 趋势变化百分比计算\n\n#### 3.2.3 页面组件\n- StatsScreen: 主统计页面\n- StatsChart: 可复用图表组件\n\n### 3.3 个人说明书系统设计\n\n#### 3.3.1 核心功能\n- 个人特征管理（优势、挑战、触发因素）\n- 应对策略库\n- 自我认知问答\n- 个性化建议生成\n\n#### 3.3.2 数据结构\n```typescript\ninterface PersonalProfile {\n  strengths: string[];\n  challenges: string[];\n  triggers: string[];\n  copingStrategies: {\n    title: string;\n    description: string;\n    effectiveness: number;  // 1-5\n  }[];\n  personalityTraits: string[];\n  aiGeneratedInsights: string[];\n}\n```\n\n#### 3.3.3 页面组件\n- PersonalProfileScreen: 个人说明书主页面\n- QuestionAnswerScreen: 问答交互页面\n- CustomQuestionScreen: 自定义问题管理\n\n### 3.4 AI分析系统设计\n\n#### 3.4.1 分析功能\n- 情绪识别与分类\n- 思维扭曲模式识别\n- 替代思维建议生成\n- 个性化心理健康建议\n\n#### 3.4.2 AI调用接口设计\n```typescript\ninterface AiService {\n  analyzeDiaryEntry(entry: Partial<DiaryEntry>): Promise<AiAnalysisResult>;\n  generateAlternativeThoughts(thought: string, emotion: string): Promise<string[]>;\n  analyzePersonality(profile: Partial<PersonalProfile>): Promise<string[]>;\n  generateExerciseRecommendations(entries: DiaryEntry[]): Promise<string[]>;\n}\n```\n\n#### 3.4.3 本地缓存策略\n- 分析结果本地缓存7天\n- 定期清理过期数据\n- 批量分析优化\n\n### 3.5 练习库系统设计\n\n#### 3.5.1 练习分类\n- 情绪调节练习\n- 认知重构练习\n- 正念冥想练习\n- 自我关怀练习\n\n#### 3.5.2 数据结构\n```typescript\ninterface Exercise {\n  id: string;\n  title: string;\n  category: string;\n  duration: number;  // 分钟\n  description: string;\n  steps: string[];\n  frequency: 'daily' | 'weekly' | 'custom';\n  recommendedFor: string[];  // 推荐的情绪/情况\n}\n\ninterface ExerciseProgress {\n  exerciseId: string;\n  completedCount: number;\n  lastCompleted: string;\n  streak: number;\n  effectiveness: number;  // 用户评分 1-5\n}\n```\n\n#### 3.5.3 页面组件\n- ExercisesScreen: 练习列表页面\n- ExerciseCard: 练习详情卡片\n- QuestionLibraryScreen: 问题库管理\n\n## 4. UI/UX设计\n\n### 4.1 设计原则\n- 简洁、温暖的视觉风格\n- 无障碍设计（支持深色模式、文字大小调整）\n- 直观的导航结构\n- 渐进式功能展示\n\n### 4.2 色彩方案\n- 主色调：温暖蓝紫色系（#6C63FF）- 代表平静与智慧\n- 辅助色：柔和的绿色（#4CAF50）- 代表成长与希望\n- 情绪色彩映射：根据情绪类型使用对应的柔和色调\n\n### 4.3 导航结构\n```\n底部标签导航：\n- 首页 (HomeScreen)\n- 日记 (DiaryListScreen)\n- 统计 (StatsScreen)\n- 练习 (ExercisesScreen)\n- 我的 (ProfileScreen)\n```\n\n## 5. 技术实现细节\n\n### 5.1 本地存储设计\n- AsyncStorage用于持久化用户数据\n- 定期自动备份机制\n- 数据加密存储（敏感信息）\n\n### 5.2 国际化支持\n- i18next框架集成\n- 支持中英文切换\n- 动态文本翻译\n\n### 5.3 状态管理设计\n```typescript\n// store/slices/diarySlice.ts\nexport const diarySlice = createSlice({\n  name: 'diary',\n  initialState: {\n    entries: [] as DiaryEntry[],\n    currentEntry: null,\n    loading: false,\n    error: null\n  },\n  reducers: {\n    addEntry: (state, action) => {},\n    updateEntry: (state, action) => {},\n    deleteEntry: (state, action) => {},\n    setEntries: (state, action) => {},\n    setCurrentEntry: (state, action) => {}\n  }\n});\n```\n\n### 5.4 性能优化策略\n- 组件懒加载\n- 图片资源优化\n- 数据分页加载\n- 批量操作合并\n\n## 6. 测试策略\n\n### 6.1 单元测试覆盖\n- 核心业务逻辑测试\n- 数据处理函数测试\n- 组件渲染测试\n\n### 6.2 UI测试\n- 界面响应式测试\n- 多平台兼容性测试\n- 无障碍功能测试\n\n## 7. 部署与发布策略\n\n### 7.1 版本控制\n- 遵循语义化版本规范\n- 渐进式功能发布\n- A/B测试框架集成\n\n### 7.2 数据同步策略\n- 本地优先设计\n- 可选的云端备份\n- 隐私优先的数据处理\n\n## 8. 风险评估与应对\n\n| 风险 | 影响 | 应对措施 |\n|------|------|----------|\n| AI分析准确性 | 高 | 人工审核、持续优化模型、用户反馈机制 |\n| 性能问题 | 中 | 优化代码、资源管理、缓存策略 |\n| 用户隐私安全 | 高 | 端到端加密、本地存储优先、透明隐私政策 |\n| 用户粘性 | 中 | 个性化推荐、成就系统、定期更新内容 |",
  "fileStats": {
    "size": 6602,
    "lines": 263,
    "lastModified": "2025-10-06T02:45:57.381Z"
  },
  "comments": []
}