{
  "id": "snapshot_1759721695717_f72qq0wfk",
  "approvalId": "approval_1759721695710_v9nud4i7v",
  "approvalTitle": "日记功能增强设计文档批准请求",
  "version": 1,
  "timestamp": "2025-10-06T03:34:55.717Z",
  "trigger": "initial",
  "status": "pending",
  "content": "# 日记功能增强设计文档\n\n## 概述\n\n本文档详细描述了EchoMind应用中日记功能增强的技术设计方案。该功能旨在提供更丰富的情绪记录维度、详细的思维分析、应对策略模板和日记提醒系统，以支持用户更全面地了解自己的情绪模式和思维习惯。本设计遵循项目的技术架构和代码规范，确保与现有系统的无缝集成。\n\n## 指导文档一致性\n\n### 技术标准（tech.md）\n\n本设计遵循项目技术架构中定义的分层架构模式：\n- 展示层：使用React Native组件实现界面\n- 状态管理层：通过Redux Toolkit管理状态\n- 服务层：封装业务逻辑\n- 数据访问层：与AsyncStorage交互\n\n同时遵循单向数据流原则，保持代码的可维护性和可测试性。\n\n### 项目结构（structure.md）\n\n实现将遵循现有的项目组织结构，主要涉及以下目录：\n- `src/screens/`：更新现有日记相关屏幕\n- `src/services/`：扩展现有的DiaryService\n- `src/store/slices/`：增强日记相关状态管理\n- `src/types/`：定义新的数据类型\n- `src/components/`：创建新的UI组件\n\n## 代码重用分析\n\n### 现有组件利用\n\n- **DiaryWizardScreen.tsx**：扩展现有日记创建向导，添加新功能\n- **DiaryDetailScreen.tsx**：更新以显示增强的数据维度\n- **DiaryService.ts**：扩展以支持新的数据模型和操作\n- **StorageService.ts**：复用现有存储服务进行数据持久化\n- **EmotionChip.tsx**：扩展现有的情绪标签组件以支持多选\n- **DistortionChip.tsx**：增强思维扭曲识别组件\n\n### 集成点\n\n- **Redux Store**：与现有日记状态集成，扩展状态结构\n- **AsyncStorage**：利用现有存储机制，确保向后兼容\n- **UserPreferencesService**：集成以支持提醒设置保存\n- **LocalizationService**：确保多语言支持\n\n## 架构\n\n### 模块化设计原则\n\n- **单一文件职责**：每个文件专注于特定功能，如情绪记录、思维分析等\n- **组件隔离**：创建小型、专注的组件，如情绪强度选择器、思维扭曲分析器等\n- **服务层分离**：将数据访问、业务逻辑和表示层清晰分离\n- **工具模块化**：将通用功能封装为独立的工具函数\n\n```mermaid\ngraph TD\n    A[DiaryWizardScreen] --> B[EmotionIntensitySelector]\n    A --> C[MultiEmotionSelector]\n    A --> D[ThoughtAnalyzer]\n    A --> E[CopingStrategyTemplate]\n    F[DiaryService] --> G[StorageService]\n    H[NotificationService] --> I[UserPreferencesService]\n    A --> F\n    J[DiaryReducer] --> F\n    H --> J\n```\n\n## 组件和接口\n\n### 1. EmotionIntensitySelector\n\n- **目的**：允许用户选择情绪强度（1-10分）\n- **接口**：\n  - `onIntensityChange: (intensity: number) => void`\n  - `initialIntensity?: number`\n- **依赖**：无\n- **复用**：独立新组件\n\n### 2. MultiEmotionSelector\n\n- **目的**：允许用户选择多个相关的情绪标签\n- **接口**：\n  - `onEmotionsChange: (emotions: Emotion[]) => void`\n  - `selectedEmotions?: Emotion[]`\n- **依赖**：Emotion类型定义\n- **复用**：扩展现有EmotionChip组件\n\n### 3. ThoughtAnalyzer\n\n- **目的**：分析思维内容并识别思维扭曲类型\n- **接口**：\n  - `thoughtContent: string`\n  - `onAnalysisComplete: (analysis: ThoughtAnalysis) => void`\n- **依赖**：ThoughtAnalysis类型定义\n- **复用**：与现有的思维分析逻辑集成\n\n### 4. CopingStrategyTemplate\n\n- **目的**：根据情绪和思维类型提供应对策略模板\n- **接口**：\n  - `emotionType: string`\n  - `distortionTypes: string[]`\n  - `onStrategySelected: (strategy: CopingStrategy) => void`\n- **依赖**：CopingStrategy类型定义\n- **复用**：独立新组件\n\n### 5. DiaryNotificationService\n\n- **目的**：管理日记提醒通知\n- **接口**：\n  - `scheduleNotification: (time: string) => Promise<boolean>`\n  - `cancelNotification: () => Promise<boolean>`\n  - `isNotificationEnabled: () => Promise<boolean>`\n- **依赖**：React Native Notifications API\n- **复用**：与UserPreferencesService集成\n\n## 数据模型\n\n### 1. EnhancedDiaryEntry\n\n```typescript\ninterface EnhancedDiaryEntry {\n  id: string;\n  timestamp: number;\n  content: string;\n  emotions: {\n    primary: string;\n    intensity: number;  // 1-10\n    additional: string[];\n    triggers: string[]; // 工作、家庭、社交等\n  };\n  thoughtProcess: {\n    content: string;\n    distortions: {\n      type: string;\n      confidence: number;\n    }[];\n    alternativeThoughts: string[];\n    verification: string;\n  };\n  copingStrategies: {\n    strategy: string;\n    templateId: string;\n    implementation: string;\n    effectiveness: number | null; // 1-10, null表示未评价\n  }[];\n}\n```\n\n### 2. UserPreferences\n\n```typescript\ninterface UserPreferences {\n  // 现有字段...\n  diaryReminder: {\n    enabled: boolean;\n    time: string; // \"HH:mm\"格式\n    lastReminderDate?: number;\n  };\n}\n```\n\n### 3. CopingStrategyTemplate\n\n```typescript\ninterface CopingStrategyTemplate {\n  id: string;\n  title: string;\n  description: string;\n  applicableEmotions: string[];\n  applicableDistortions: string[];\n  steps: string[];\n}\n```\n\n## 错误处理\n\n### 错误场景\n\n1. **数据保存失败**\n   - **处理**：实现重试机制，最多3次重试\n   - **用户影响**：显示保存失败提示，允许用户手动重试\n\n2. **通知权限被拒绝**\n   - **处理**：捕获权限错误，提供引导用户开启权限的信息\n   - **用户影响**：显示权限提示，引导用户前往系统设置\n\n3. **分析功能不可用**\n   - **处理**：提供备选的手动选择功能\n   - **用户影响**：提示分析暂时不可用，引导用户手动标记\n\n4. **数据结构不兼容**\n   - **处理**：实现数据迁移逻辑，确保旧数据可以正常显示\n   - **用户影响**：透明处理，不影响用户体验\n\n## 测试策略\n\n### 单元测试\n\n- 为所有新组件编写单元测试，使用Jest和React Testing Library\n- 重点测试组件的渲染、状态变化和事件处理\n- 模拟依赖服务，确保组件行为符合预期\n\n### 集成测试\n\n- 测试服务层与存储层的交互\n- 验证Redux状态更新与组件渲染的一致性\n- 测试数据保存和读取的完整流程\n\n### 端到端测试\n\n- 使用Detox或Appium测试关键用户流程\n- 验证日记创建、查看和编辑的完整路径\n- 测试提醒设置和触发流程",
  "fileStats": {
    "size": 6415,
    "lines": 214,
    "lastModified": "2025-10-06T03:34:46.891Z"
  },
  "comments": []
}